{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#demo-bd","title":"demo-bd","text":"<p>Awesome demo_bd created by abnerjacobsen</p>"},{"location":"#using","title":"Using","text":"<p>To serve this app, run:</p> <pre><code>docker compose up app\n</code></pre> <p>and open localhost:8000 in your browser.</p> <p>Within the Dev Container this is equivalent to:</p> <pre><code>poe api\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"Prerequisites 1. Set up Git to use SSH  1. [Generate an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) and [add the SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account). 1. Configure SSH to automatically load your SSH keys:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\n\nHost *\n  AddKeysToAgent yes\n  IgnoreUnknown UseKeychain\n  UseKeychain yes\n  ForwardAgent yes\nEOF\n</code></pre> 2. Install Docker  1. [Install Docker Desktop](https://www.docker.com/get-started).     - _Linux only_:         - Export your user's user id and group id so that [files created in the Dev Container are owned by your user](https://github.com/moby/moby/issues/3206):             <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.bashrc\n\nexport UID=$(id --user)\nexport GID=$(id --group)\nEOF\n</code></pre> 3. Install VS Code or PyCharm  1. [Install VS Code](https://code.visualstudio.com/) and [VS Code's Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers). Alternatively, install [PyCharm](https://www.jetbrains.com/pycharm/download/). 2. _Optional:_ install a [Nerd Font](https://www.nerdfonts.com/font-downloads) such as [FiraCode Nerd Font](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode) and [configure VS Code](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions) or [configure PyCharm](https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions) to use it.   Development environments  The following development environments are supported:  1. \u2b50\ufe0f _GitHub Codespaces_: click on _Code_ and select _Create codespace_ to start a Dev Container with [GitHub Codespaces](https://github.com/features/codespaces). 1. \u2b50\ufe0f _Dev Container (with container volume)_: click on [Open in Dev Containers](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/abnerjacobsen/demo-bd) to clone this repository in a container volume and create a Dev Container with VS Code. 1. _Dev Container_: clone this repository, open it with VS Code, and run Ctrl/\u2318 + \u21e7 + P \u2192 _Dev Containers: Reopen in Container_. 1. _PyCharm_: clone this repository, open it with PyCharm, and [configure Docker Compose as a remote interpreter](https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html#docker-compose-remote) with the `dev` service. 1. _Terminal_: clone this repository, open it with your terminal, and run `docker compose up --detach dev` to start a Dev Container in the background, and then run `docker compose exec dev zsh` to open a shell prompt in the Dev Container.   Developing  - This project follows the [Conventional Commits](https://www.conventionalcommits.org/) standard to automate [Semantic Versioning](https://semver.org/) and [Keep A Changelog](https://keepachangelog.com/) with [Commitizen](https://github.com/commitizen-tools/commitizen). - Run `poe` from within the development environment to print a list of [Poe the Poet](https://github.com/nat-n/poethepoet) tasks available to run on this project. - Run `poetry add {package}` from within the development environment to install a run time dependency and add it to `pyproject.toml` and `poetry.lock`. Add `--group test` or `--group dev` to install a CI or development dependency, respectively. - Run `poetry update` from within the development environment to upgrade all dependencies to the latest versions allowed by `pyproject.toml`. - Run `poe docs`, `poe lint` and `ENVIRONMENT=dev poe test` before any commit, or your git push can fail. `poe docs` generate any new documentation for changes/additions in the python modules. - Run `cz --name cz_gitmoji commit` to commit files using conventional commits with emojis. - Run `cz --name cz_gitmoji bump --changelog` to bump the package's version, update the `CHANGELOG.md`, and create a git tag. - Run `git push --tags` to push the new tag to github."},{"location":"MODULES-Reference/demo_bd/","title":"Index","text":"<p>Demo BD.</p>"},{"location":"MODULES-Reference/demo_bd/api/","title":"Api","text":"<p>Demo BD REST API.</p>"},{"location":"MODULES-Reference/demo_bd/api/#src.demo_bd.api.compute","title":"<code>compute(n=42)</code>  <code>async</code>","text":"<p>Compute the result of a CPU-bound function.</p> RETURNS DESCRIPTION <code>    int: fibonacci result</code> Source code in <code>src/demo_bd/api.py</code> <pre><code>@app.get(\"/compute\")\nasync def compute(n: int = 42) -&gt; int:\n    \"\"\"Compute the result of a CPU-bound function.\n\n    Returns\n    -------\n        int: fibonacci result\n    \"\"\"\n\n    def fibonacci(n: int) -&gt; int:\n        return n if n &lt;= 1 else fibonacci(n - 1) + fibonacci(n - 2)\n\n    result = await asyncio.to_thread(fibonacci, n)\n    return result\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/api/#src.demo_bd.api.lifespan","title":"<code>lifespan(app)</code>  <code>async</code>","text":"<p>Handle FastAPI startup and shutdown events.</p> Source code in <code>src/demo_bd/api.py</code> <pre><code>@asynccontextmanager\nasync def lifespan(app: FastAPI) -&gt; AsyncGenerator[None, None]:\n    \"\"\"Handle FastAPI startup and shutdown events.\"\"\"\n    # Startup events:\n    # - Remove all handlers associated with the root logger object.\n    for handler in logging.root.handlers:\n        logging.root.removeHandler(handler)\n    # - Add coloredlogs' colored StreamHandler to the root logger.\n    coloredlogs.install()\n    yield\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/","title":"Index","text":"<p>Demo BD Core.</p>"},{"location":"MODULES-Reference/demo_bd/core/config/","title":"Index","text":"<p>Demo BD core config.</p>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/","title":"Settings","text":"<p>Configura\u00e7\u00f5es centrais do Demo BD.</p> <p>Este m\u00f3dulo centraliza e organiza todas as configura\u00e7\u00f5es essenciais da aplica\u00e7\u00e3o Demo BD, incluindo par\u00e2metros de conex\u00e3o com o banco de dados PostgreSQL, metadados da aplica\u00e7\u00e3o, controle de ambiente, plataforma, logging e integra\u00e7\u00e3o multi-tenant.</p> <p>Principais componentes:</p> <ul> <li>DbSettings: configura\u00e7\u00f5es detalhadas para conex\u00e3o e autentica\u00e7\u00e3o com o banco de dados, com montagem autom\u00e1tica da string de conex\u00e3o (DSN).</li> <li>AppSettings: configura\u00e7\u00f5es globais da aplica\u00e7\u00e3o, incluindo ambiente, plataforma, metadados, logging e refer\u00eancia \u00e0s configura\u00e7\u00f5es de banco de dados.</li> <li>get_settings: fun\u00e7\u00e3o utilit\u00e1ria com cache para obter as configura\u00e7\u00f5es j\u00e1 validadas, evitando reprocessamento e garantindo performance.</li> </ul> <p>As configura\u00e7\u00f5es s\u00e3o baseadas em Pydantic e SnapEnv, permitindo valida\u00e7\u00e3o autom\u00e1tica, tipagem forte e f\u00e1cil extens\u00e3o para m\u00faltiplos ambientes (desenvolvimento, produ\u00e7\u00e3o, etc).</p> Uso t\u00edpico: <pre><code>from demo_bd.core.config.settings import settings\ndb_url = settings.DB.dsn\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/#src.demo_bd.core.config.settings.AppSettings","title":"<code>AppSettings</code>","text":"<p>               Bases: <code>SnapEnvCommonSettings</code></p> <p>Main application settings.</p> <p>This class centralizes all configuration options for the Demo BD application, including environment, platform, application metadata, logging, and database settings.</p> ATTRIBUTE DESCRIPTION <code>env</code> <p>The current environment (e.g., \"development\", \"production\").</p> <p> TYPE: <code>str</code> </p> <code>platform</code> <p>The current platform identifier (e.g., \"linux\", \"windows\", \"other\").</p> <p> TYPE: <code>str</code> </p> <code>APP_TITLE</code> <p>The title of the application.</p> <p> TYPE: <code>str</code> </p> <code>APP_SLUG</code> <p>The slug identifier for the application.</p> <p> TYPE: <code>str</code> </p> <code>TENANT_SLUG</code> <p>The tenant slug for multi-tenant deployments.</p> <p> TYPE: <code>str</code> </p> <code>LOG_LEVEL</code> <p>The log level for the application (e.g., \"INFO\", \"DEBUG\").</p> <p> TYPE: <code>str</code> </p> <code>DB</code> <p>Database configuration settings (instance of DbSettings).</p> <p> TYPE: <code>DbSettings</code> </p> <code>server</code> <p>Computed property. Returns the local server name (hostname) in upper case, stripped of any domain part.</p> <p> TYPE: <code>str</code> </p> Notes <p>Inherits from SnapEnvCommonSettings, which provides base environment configuration.</p> Source code in <code>src/demo_bd/core/config/settings.py</code> <pre><code>class AppSettings(SnapEnvCommonSettings):\n    \"\"\"\n    Main application settings.\n\n    This class centralizes all configuration options for the Demo BD application,\n    including environment, platform, application metadata, logging, and database settings.\n\n    Attributes\n    ----------\n    env : str\n        The current environment (e.g., \"development\", \"production\").\n    platform : str\n        The current platform identifier (e.g., \"linux\", \"windows\", \"other\").\n    APP_TITLE : str\n        The title of the application.\n    APP_SLUG : str\n        The slug identifier for the application.\n    TENANT_SLUG : str\n        The tenant slug for multi-tenant deployments.\n    LOG_LEVEL : str\n        The log level for the application (e.g., \"INFO\", \"DEBUG\").\n    DB : DbSettings\n        Database configuration settings (instance of DbSettings).\n    server : str\n        Computed property. Returns the local server name (hostname) in upper case, stripped of any domain part.\n\n    Notes\n    -----\n    Inherits from SnapEnvCommonSettings, which provides base environment configuration.\n    \"\"\"\n\n    # Environment depending settings\n    env: str = ENVIRONMENT\n    platform: str = PLATFORM.get(sys.platform, \"other\")\n\n    # App settings\n    APP_TITLE: str\n    APP_SLUG: str\n    TENANT_SLUG: str\n    LOG_LEVEL: str\n    DB: DbSettings = DbSettings()\n\n    # Computed settings\n    @computed_field  # type: ignore[misc]\n    @property\n    def server(self) -&gt; str:\n        \"\"\"\n        Return local server name stripped of possible domain part.\n\n        Returns\n        -------\n        str\n            Server name in upper case.\n        \"\"\"\n        return platform.node()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/#src.demo_bd.core.config.settings.AppSettings.server","title":"<code>server</code>  <code>property</code>","text":"<p>Return local server name stripped of possible domain part.</p> RETURNS DESCRIPTION <code>str</code> <p>Server name in upper case.</p>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/#src.demo_bd.core.config.settings.DbSettings","title":"<code>DbSettings</code>","text":"<p>               Bases: <code>SnapEnvCommonSettings</code></p> <p>Database connection and configuration settings.</p> <p>This class centralizes all configuration options required to connect to the application's PostgreSQL database, including credentials, host, port, driver, and debug options.</p> ATTRIBUTE DESCRIPTION <code>POSTGRES_HOST</code> <p>Hostname or IP address of the PostgreSQL server.</p> <p> TYPE: <code>str</code> </p> <code>POSTGRES_PORT</code> <p>Port number on which the PostgreSQL server is listening.</p> <p> TYPE: <code>int</code> </p> <code>POSTGRES_DB</code> <p>Name of the PostgreSQL database to connect to.</p> <p> TYPE: <code>str</code> </p> <code>POSTGRES_USER</code> <p>Username for authenticating with the PostgreSQL database.</p> <p> TYPE: <code>str</code> </p> <code>POSTGRES_PASSWORD</code> <p>Password for authenticating with the PostgreSQL database.</p> <p> TYPE: <code>str</code> </p> <code>POSTGRES_DRIVER</code> <p>SQLAlchemy driver string for PostgreSQL connections (default: \"postgresql+asyncpg\").</p> <p> TYPE: <code>str</code> </p> <code>DB_ECHO_DEBUG</code> <p>If True, enables SQLAlchemy debug logging (echo SQL statements).</p> <p> TYPE: <code>bool</code> </p> <code>dsn</code> <p>Computed property. Returns the full database connection string (DSN) assembled from the above fields.</p> <p> TYPE: <code>str</code> </p> Notes <p>Inherits from SnapEnvCommonSettings, which provides base environment configuration.</p> Source code in <code>src/demo_bd/core/config/settings.py</code> <pre><code>class DbSettings(SnapEnvCommonSettings):\n    \"\"\"\n    Database connection and configuration settings.\n\n    This class centralizes all configuration options required to connect to the application's PostgreSQL database,\n    including credentials, host, port, driver, and debug options.\n\n    Attributes\n    ----------\n    POSTGRES_HOST : str\n        Hostname or IP address of the PostgreSQL server.\n    POSTGRES_PORT : int\n        Port number on which the PostgreSQL server is listening.\n    POSTGRES_DB : str\n        Name of the PostgreSQL database to connect to.\n    POSTGRES_USER : str\n        Username for authenticating with the PostgreSQL database.\n    POSTGRES_PASSWORD : str\n        Password for authenticating with the PostgreSQL database.\n    POSTGRES_DRIVER : str\n        SQLAlchemy driver string for PostgreSQL connections (default: \"postgresql+asyncpg\").\n    DB_ECHO_DEBUG : bool\n        If True, enables SQLAlchemy debug logging (echo SQL statements).\n    dsn : str\n        Computed property. Returns the full database connection string (DSN) assembled from the above fields.\n\n    Notes\n    -----\n    Inherits from SnapEnvCommonSettings, which provides base environment configuration.\n    \"\"\"\n\n    POSTGRES_HOST: str\n    POSTGRES_PORT: int\n    POSTGRES_DB: str\n    POSTGRES_USER: str\n    POSTGRES_PASSWORD: str\n    POSTGRES_DRIVER: str = \"postgresql+asyncpg\"\n    DB_ECHO_DEBUG: bool\n\n    # Computed settings\n    @computed_field  # type: ignore[misc]\n    @property\n    def dsn(self) -&gt; str:\n        \"\"\"\n        Assemble and return the PostgreSQL DSN (connection string) using the configured driver, credentials, host, port, and database.\n\n        Returns\n        -------\n        str\n            The generated connection URL (DSN).\n        \"\"\"\n        return f\"{self.POSTGRES_DRIVER}://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/#src.demo_bd.core.config.settings.DbSettings.dsn","title":"<code>dsn</code>  <code>property</code>","text":"<p>Assemble and return the PostgreSQL DSN (connection string) using the configured driver, credentials, host, port, and database.</p> RETURNS DESCRIPTION <code>str</code> <p>The generated connection URL (DSN).</p>"},{"location":"MODULES-Reference/demo_bd/core/config/settings/#src.demo_bd.core.config.settings.get_settings","title":"<code>get_settings()</code>  <code>cached</code>","text":"<p>Retrieve the application settings with caching.</p> <p>This function uses an LRU cache to store the settings so that subsequent calls are fast and do not re-initialize the settings.</p> RETURNS DESCRIPTION <code>AppSettings</code> <p>The application settings instance.</p> Source code in <code>src/demo_bd/core/config/settings.py</code> <pre><code>@lru_cache\ndef get_settings() -&gt; AppSettings:\n    \"\"\"\n    Retrieve the application settings with caching.\n\n    This function uses an LRU cache to store the settings so that\n    subsequent calls are fast and do not re-initialize the settings.\n\n    Returns\n    -------\n    AppSettings\n        The application settings instance.\n    \"\"\"\n    return AppSettings()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/","title":"Index","text":"<p>Demo BD database core.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/","title":"abc","text":""},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel","title":"<code>AbstractModel</code>","text":"<p>               Bases: <code>declarative_base</code></p> <p>Base class for all models.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>class AbstractModel(bind.declarative_base):  # type: ignore\n    \"\"\"Base class for all models.\"\"\"\n\n    __abstract__ = True\n    __allow_unmapped__ = True\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"Convert the data to a dictionary.\"\"\"\n        return {\n            f\"{self.__tablename__}_{col.name}\": getattr(self, col.name)\n            for col in t.cast(list[Column], self.__table__.columns)\n        }\n\n    @staticmethod\n    def _get_column(\n        model: type[T],\n        col: InstrumentedAttribute[t.Any],\n    ) -&gt; str:\n        \"\"\"Get the name of a column in a model.\"\"\"\n        name = col.name\n        if name not in model.__table__.columns:\n            raise ValueError(f\"Column {name} not found in {model.__name__}\")\n        return name\n\n    @classmethod\n    def _get_primary_key(cls) -&gt; str:\n        \"\"\"Return the primary key of the model.\"\"\"\n        return cls.__table__.primary_key.columns[0].name\n\n    @classmethod\n    async def create(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        **kwargs,\n    ) -&gt; T:\n        \"\"\"Create a new record in the database.\"\"\"\n        async with sessionmaker() as async_session:\n            instance = cls(**kwargs)\n            async_session.add(instance)\n            await async_session.commit()\n            await async_session.refresh(instance)\n            return instance\n\n    @classmethod\n    async def get(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        primary_key: int,\n    ) -&gt; T:\n        \"\"\"Get a record from the database by its primary key.\"\"\"\n        async with sessionmaker() as async_session:\n            return await async_session.get(cls, primary_key)\n\n    @classmethod\n    async def get_with_join(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        primary_key: int,\n        join_tables: t.Any | list[t.Any] = None,\n    ) -&gt; T:\n        \"\"\"Get a record from the database by its primary key.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).filter_by(**{cls._get_primary_key(): primary_key})\n            if join_tables is not None:\n                statement = statement.options(selectinload(*join_tables))\n            result = await async_session.execute(statement)\n            return result.scalars().first()\n\n    @classmethod\n    async def get_by_key(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        key: InstrumentedAttribute[t.Any],\n        value: t.Any,\n    ) -&gt; T | None:\n        \"\"\"Get a record by a key.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).filter_by(**{cls._get_column(cls, key): value})\n            result = await async_session.execute(statement)\n            return result.scalars().first()\n\n    @classmethod\n    async def get_by_filter(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        **kwargs,\n    ) -&gt; T | None:\n        \"\"\"Get a record from the database by a filter.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).filter_by(**kwargs)\n            result = await async_session.execute(statement)\n            return result.scalars().first()\n\n    @classmethod\n    async def update(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        primary_key: t.Any,\n        **kwargs,\n    ) -&gt; T | None:\n        \"\"\"Update a record in the database.\"\"\"\n        async with sessionmaker() as session:\n            instance = await session.get(cls, primary_key)\n            if instance:\n                for key, value in kwargs.items():\n                    setattr(instance, key, value)\n                await session.commit()\n                return instance\n            return None\n\n    @classmethod\n    async def update_by_key(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        key: InstrumentedAttribute[t.Any],\n        value: t.Any,\n        **kwargs,\n    ) -&gt; T | None:\n        \"\"\"Update a record in the database by a key.\"\"\"\n        async with sessionmaker() as async_session:\n            instance = await cls.get_by_key(sessionmaker, key, value)\n            if instance:\n                for attr, new_value in kwargs.items():\n                    setattr(instance, attr, new_value)\n                async_session.add(instance)\n                await async_session.commit()\n            return instance\n\n    @classmethod\n    async def delete(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        primary_key: int,\n    ) -&gt; T | None:\n        \"\"\"Delete a record from the database by its primary key.\"\"\"\n        async with sessionmaker() as async_session:\n            instance = await cls.get(sessionmaker, primary_key)\n            if instance:\n                await async_session.delete(instance)\n                await async_session.commit()\n            return instance\n\n    @classmethod\n    async def delete_by_key(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        key: InstrumentedAttribute[t.Any],\n        value: t.Any,\n    ) -&gt; T | None:\n        \"\"\"Delete a record from the database by a key.\"\"\"\n        async with sessionmaker() as async_session:\n            instance = await cls.get_by_key(sessionmaker, key, value)\n            if instance:\n                await async_session.delete(instance)\n                await async_session.commit()\n            return instance\n\n    @classmethod\n    async def delete_by_filter(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        **kwargs,\n    ) -&gt; T | None:\n        \"\"\"Delete a record from the database by a filter.\"\"\"\n        async with sessionmaker() as async_session:\n            instance = await cls.get_by_filter(sessionmaker, **kwargs)\n            if instance:\n                await async_session.delete(instance)\n                await async_session.commit()\n            return instance\n\n    @classmethod\n    async def create_or_update(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        **kwargs,\n    ) -&gt; T:\n        \"\"\"Get and update a record from the database by its primary key.\"\"\"\n        primary_key = kwargs.get(cls._get_primary_key())\n        instance = await cls.get(sessionmaker, primary_key) if primary_key else None\n        if instance:\n            await cls.update(sessionmaker, primary_key, **kwargs)\n            return instance\n        return await cls.create(sessionmaker, **kwargs)\n\n    @classmethod\n    async def exists(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        primary_key: int,\n    ) -&gt; bool:\n        \"\"\"Check if a record exists in the database by its primary key.\"\"\"\n        async with sessionmaker() as async_session:\n            return await async_session.get(cls, primary_key) is not None\n\n    @classmethod\n    async def exists_by_filter(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        **kwargs,\n    ) -&gt; bool:\n        \"\"\"Check if a record exists in the database by a filter.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).filter_by(**kwargs).order_by(cls.id.asc())\n            result = await async_session.execute(statement)\n            return bool(result.scalar())\n\n    @classmethod\n    async def paginate(  # noqa: PLR0913\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        page_number: int,\n        page_size: int = 7,\n        join_tables: t.Any | list[t.Any] = None,\n        filters: t.Sequence[t.Any] | None = None,\n        order_by: Column | None = None,\n    ) -&gt; t.Sequence[T]:\n        \"\"\"Get paginated records from the database by a filter.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).limit(page_size).offset((page_number - 1) * page_size)\n            if filters is not None:\n                statement = statement.filter(*filters)\n            if join_tables is not None:\n                statement = statement.join(*join_tables).options(selectinload(*join_tables))\n            if order_by is not None:\n                statement = statement.order_by(order_by)\n            result = await async_session.execute(statement)\n            return result.scalars().all()\n\n    @classmethod\n    async def total_pages(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        page_size: int = 7,\n        join_tables: t.Any | list[t.Any] = None,\n        filters: t.Sequence[t.Any] | None = None,\n    ) -&gt; int:\n        async with sessionmaker() as async_session:\n            statement = select(func.count(cls.__table__.primary_key.columns[0]))\n            if filters is not None:\n                statement = statement.filter(*filters)\n            if join_tables is not None:\n                statement = statement.join(*join_tables)\n            query = await async_session.execute(statement)\n            return (query.scalar() + page_size - 1) // page_size\n\n    @classmethod\n    async def all(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        join_tables: t.Any | list[t.Any] = None,\n    ) -&gt; t.Sequence[T]:\n        \"\"\"Get all records from the database.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls)\n            if join_tables is not None:\n                statement = statement.options(selectinload(*join_tables))\n            result = await async_session.execute(statement)\n            return result.scalars().all()\n\n    @classmethod\n    async def all_by_filter(\n        cls: type[T],\n        sessionmaker: async_sessionmaker,\n        join_tables: t.Any | list[t.Any] = None,\n        **kwargs,\n    ) -&gt; t.Sequence[T]:\n        \"\"\"Get all records from the database by a filter.\"\"\"\n        async with sessionmaker() as async_session:\n            statement = select(cls).filter_by(**kwargs)\n            if join_tables is not None:\n                statement = statement.options(selectinload(*join_tables))\n            result = await async_session.execute(statement)\n            return result.scalars().all()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.all","title":"<code>all(sessionmaker, join_tables=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get all records from the database.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def all(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    join_tables: t.Any | list[t.Any] = None,\n) -&gt; t.Sequence[T]:\n    \"\"\"Get all records from the database.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls)\n        if join_tables is not None:\n            statement = statement.options(selectinload(*join_tables))\n        result = await async_session.execute(statement)\n        return result.scalars().all()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.all_by_filter","title":"<code>all_by_filter(sessionmaker, join_tables=None, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get all records from the database by a filter.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def all_by_filter(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    join_tables: t.Any | list[t.Any] = None,\n    **kwargs,\n) -&gt; t.Sequence[T]:\n    \"\"\"Get all records from the database by a filter.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).filter_by(**kwargs)\n        if join_tables is not None:\n            statement = statement.options(selectinload(*join_tables))\n        result = await async_session.execute(statement)\n        return result.scalars().all()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.create","title":"<code>create(sessionmaker, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create a new record in the database.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def create(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    **kwargs,\n) -&gt; T:\n    \"\"\"Create a new record in the database.\"\"\"\n    async with sessionmaker() as async_session:\n        instance = cls(**kwargs)\n        async_session.add(instance)\n        await async_session.commit()\n        await async_session.refresh(instance)\n        return instance\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.create_or_update","title":"<code>create_or_update(sessionmaker, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get and update a record from the database by its primary key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def create_or_update(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    **kwargs,\n) -&gt; T:\n    \"\"\"Get and update a record from the database by its primary key.\"\"\"\n    primary_key = kwargs.get(cls._get_primary_key())\n    instance = await cls.get(sessionmaker, primary_key) if primary_key else None\n    if instance:\n        await cls.update(sessionmaker, primary_key, **kwargs)\n        return instance\n    return await cls.create(sessionmaker, **kwargs)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.delete","title":"<code>delete(sessionmaker, primary_key)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Delete a record from the database by its primary key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def delete(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    primary_key: int,\n) -&gt; T | None:\n    \"\"\"Delete a record from the database by its primary key.\"\"\"\n    async with sessionmaker() as async_session:\n        instance = await cls.get(sessionmaker, primary_key)\n        if instance:\n            await async_session.delete(instance)\n            await async_session.commit()\n        return instance\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.delete_by_filter","title":"<code>delete_by_filter(sessionmaker, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Delete a record from the database by a filter.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def delete_by_filter(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    **kwargs,\n) -&gt; T | None:\n    \"\"\"Delete a record from the database by a filter.\"\"\"\n    async with sessionmaker() as async_session:\n        instance = await cls.get_by_filter(sessionmaker, **kwargs)\n        if instance:\n            await async_session.delete(instance)\n            await async_session.commit()\n        return instance\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.delete_by_key","title":"<code>delete_by_key(sessionmaker, key, value)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Delete a record from the database by a key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def delete_by_key(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    key: InstrumentedAttribute[t.Any],\n    value: t.Any,\n) -&gt; T | None:\n    \"\"\"Delete a record from the database by a key.\"\"\"\n    async with sessionmaker() as async_session:\n        instance = await cls.get_by_key(sessionmaker, key, value)\n        if instance:\n            await async_session.delete(instance)\n            await async_session.commit()\n        return instance\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.exists","title":"<code>exists(sessionmaker, primary_key)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Check if a record exists in the database by its primary key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def exists(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    primary_key: int,\n) -&gt; bool:\n    \"\"\"Check if a record exists in the database by its primary key.\"\"\"\n    async with sessionmaker() as async_session:\n        return await async_session.get(cls, primary_key) is not None\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.exists_by_filter","title":"<code>exists_by_filter(sessionmaker, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Check if a record exists in the database by a filter.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def exists_by_filter(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    **kwargs,\n) -&gt; bool:\n    \"\"\"Check if a record exists in the database by a filter.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).filter_by(**kwargs).order_by(cls.id.asc())\n        result = await async_session.execute(statement)\n        return bool(result.scalar())\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.get","title":"<code>get(sessionmaker, primary_key)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get a record from the database by its primary key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def get(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    primary_key: int,\n) -&gt; T:\n    \"\"\"Get a record from the database by its primary key.\"\"\"\n    async with sessionmaker() as async_session:\n        return await async_session.get(cls, primary_key)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.get_by_filter","title":"<code>get_by_filter(sessionmaker, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get a record from the database by a filter.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def get_by_filter(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    **kwargs,\n) -&gt; T | None:\n    \"\"\"Get a record from the database by a filter.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).filter_by(**kwargs)\n        result = await async_session.execute(statement)\n        return result.scalars().first()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.get_by_key","title":"<code>get_by_key(sessionmaker, key, value)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get a record by a key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def get_by_key(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    key: InstrumentedAttribute[t.Any],\n    value: t.Any,\n) -&gt; T | None:\n    \"\"\"Get a record by a key.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).filter_by(**{cls._get_column(cls, key): value})\n        result = await async_session.execute(statement)\n        return result.scalars().first()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.get_with_join","title":"<code>get_with_join(sessionmaker, primary_key, join_tables=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get a record from the database by its primary key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def get_with_join(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    primary_key: int,\n    join_tables: t.Any | list[t.Any] = None,\n) -&gt; T:\n    \"\"\"Get a record from the database by its primary key.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).filter_by(**{cls._get_primary_key(): primary_key})\n        if join_tables is not None:\n            statement = statement.options(selectinload(*join_tables))\n        result = await async_session.execute(statement)\n        return result.scalars().first()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.paginate","title":"<code>paginate(sessionmaker, page_number, page_size=7, join_tables=None, filters=None, order_by=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Get paginated records from the database by a filter.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def paginate(  # noqa: PLR0913\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    page_number: int,\n    page_size: int = 7,\n    join_tables: t.Any | list[t.Any] = None,\n    filters: t.Sequence[t.Any] | None = None,\n    order_by: Column | None = None,\n) -&gt; t.Sequence[T]:\n    \"\"\"Get paginated records from the database by a filter.\"\"\"\n    async with sessionmaker() as async_session:\n        statement = select(cls).limit(page_size).offset((page_number - 1) * page_size)\n        if filters is not None:\n            statement = statement.filter(*filters)\n        if join_tables is not None:\n            statement = statement.join(*join_tables).options(selectinload(*join_tables))\n        if order_by is not None:\n            statement = statement.order_by(order_by)\n        result = await async_session.execute(statement)\n        return result.scalars().all()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the data to a dictionary.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"Convert the data to a dictionary.\"\"\"\n    return {\n        f\"{self.__tablename__}_{col.name}\": getattr(self, col.name)\n        for col in t.cast(list[Column], self.__table__.columns)\n    }\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.update","title":"<code>update(sessionmaker, primary_key, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Update a record in the database.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def update(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    primary_key: t.Any,\n    **kwargs,\n) -&gt; T | None:\n    \"\"\"Update a record in the database.\"\"\"\n    async with sessionmaker() as session:\n        instance = await session.get(cls, primary_key)\n        if instance:\n            for key, value in kwargs.items():\n                setattr(instance, key, value)\n            await session.commit()\n            return instance\n        return None\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_abc/#src.demo_bd.core.db._abc.AbstractModel.update_by_key","title":"<code>update_by_key(sessionmaker, key, value, **kwargs)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Update a record in the database by a key.</p> Source code in <code>src/demo_bd/core/db/_abc.py</code> <pre><code>@classmethod\nasync def update_by_key(\n    cls: type[T],\n    sessionmaker: async_sessionmaker,\n    key: InstrumentedAttribute[t.Any],\n    value: t.Any,\n    **kwargs,\n) -&gt; T | None:\n    \"\"\"Update a record in the database by a key.\"\"\"\n    async with sessionmaker() as async_session:\n        instance = await cls.get_by_key(sessionmaker, key, value)\n        if instance:\n            for attr, new_value in kwargs.items():\n                setattr(instance, attr, new_value)\n            async_session.add(instance)\n            await async_session.commit()\n        return instance\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/_serialization/","title":"serialization","text":""},{"location":"MODULES-Reference/demo_bd/core/db/base/","title":"Base","text":"<p>Application ORM configuration.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.AuditColumns","title":"<code>AuditColumns</code>","text":"<p>Created/Updated At Fields Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class AuditColumns:\n    \"\"\"Created/Updated At Fields Mixin.\"\"\"\n\n    created_at: Mapped[datetime] = mapped_column(\n        DateTimeUTC(timezone=True),\n        default=lambda: datetime.now(UTC),\n    )\n    \"\"\"Date/time of instance creation.\"\"\"\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTimeUTC(timezone=True),\n        default=lambda: datetime.now(UTC),\n        onupdate=lambda: datetime.now(UTC),\n    )\n    \"\"\"Date/time of instance last update.\"\"\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.AuditColumns.created_at","title":"<code>created_at = mapped_column(DateTimeUTC(timezone=True), default=lambda: datetime.now(UTC))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Date/time of instance creation.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.AuditColumns.updated_at","title":"<code>updated_at = mapped_column(DateTimeUTC(timezone=True), default=lambda: datetime.now(UTC), onupdate=lambda: datetime.now(UTC))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Date/time of instance last update.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BasicAttributes","title":"<code>BasicAttributes</code>","text":"<p>Basic attributes for SQLALchemy tables and queries.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class BasicAttributes:\n    \"\"\"Basic attributes for SQLALchemy tables and queries.\"\"\"\n\n    if TYPE_CHECKING:\n        __name__: str\n        __table__: FromClause\n        __mapper__: Mapper[Any]\n\n    def to_dict(self, exclude: set[str] | None = None) -&gt; dict[str, Any]:\n        \"\"\"Convert model to dictionary.\n\n        Returns\n        -------\n            dict[str, Any]: A dict representation of the model\n        \"\"\"\n        exclude = {\"sa_orm_sentinel\", \"_sentinel\"}.union(self._sa_instance_state.unloaded).union(  # type: ignore[attr-defined]\n            exclude or []\n        )\n        return {\n            field: getattr(self, field)\n            for field in self.__mapper__.columns.keys()  # noqa: SIM118\n            if field not in exclude\n        }\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BasicAttributes.to_dict","title":"<code>to_dict(exclude=None)</code>","text":"<p>Convert model to dictionary.</p> RETURNS DESCRIPTION <code>    dict[str, Any]: A dict representation of the model</code> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>def to_dict(self, exclude: set[str] | None = None) -&gt; dict[str, Any]:\n    \"\"\"Convert model to dictionary.\n\n    Returns\n    -------\n        dict[str, Any]: A dict representation of the model\n    \"\"\"\n    exclude = {\"sa_orm_sentinel\", \"_sentinel\"}.union(self._sa_instance_state.unloaded).union(  # type: ignore[attr-defined]\n        exclude or []\n    )\n    return {\n        field: getattr(self, field)\n        for field in self.__mapper__.columns.keys()  # noqa: SIM118\n        if field not in exclude\n    }\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BigIntAuditBase","title":"<code>BigIntAuditBase</code>","text":"<p>               Bases: <code>CommonTableAttributes</code>, <code>BigIntPrimaryKey</code>, <code>AuditColumns</code>, <code>DeclarativeBase</code></p> <p>Base for declarative models with BigInt primary keys and audit columns.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class BigIntAuditBase(CommonTableAttributes, BigIntPrimaryKey, AuditColumns, DeclarativeBase):\n    \"\"\"Base for declarative models with BigInt primary keys and audit columns.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BigIntBase","title":"<code>BigIntBase</code>","text":"<p>               Bases: <code>BigIntPrimaryKey</code>, <code>CommonTableAttributes</code>, <code>DeclarativeBase</code></p> <p>Base for all SQLAlchemy declarative models with BigInt primary keys.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class BigIntBase(BigIntPrimaryKey, CommonTableAttributes, DeclarativeBase):\n    \"\"\"Base for all SQLAlchemy declarative models with BigInt primary keys.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BigIntPrimaryKey","title":"<code>BigIntPrimaryKey</code>","text":"<p>BigInt Primary Key Field Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class BigIntPrimaryKey:\n    \"\"\"BigInt Primary Key Field Mixin.\"\"\"\n\n    # noinspection PyMethodParameters\n    @declared_attr\n    def id(self) -&gt; Mapped[int]:\n        \"\"\"BigInt Primary key column.\"\"\"\n        return mapped_column(\n            BigIntIdentity,\n            Sequence(f\"{self.__tablename__}_id_seq\", optional=False),  # type: ignore[attr-defined]\n            primary_key=True,\n        )\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.BigIntPrimaryKey.id","title":"<code>id()</code>","text":"<p>BigInt Primary key column.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@declared_attr\ndef id(self) -&gt; Mapped[int]:\n    \"\"\"BigInt Primary key column.\"\"\"\n    return mapped_column(\n        BigIntIdentity,\n        Sequence(f\"{self.__tablename__}_id_seq\", optional=False),  # type: ignore[attr-defined]\n        primary_key=True,\n    )\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.CommonTableAttributes","title":"<code>CommonTableAttributes</code>","text":"<p>               Bases: <code>BasicAttributes</code></p> <p>Common attributes for SQLALchemy tables.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class CommonTableAttributes(BasicAttributes):\n    \"\"\"Common attributes for SQLALchemy tables.\"\"\"\n\n    if TYPE_CHECKING:\n        __tablename__: str\n    else:\n\n        @declared_attr.directive\n        def __tablename__(cls) -&gt; str:  # noqa: N805\n            \"\"\"Infer table name from class name.\"\"\"\n            return table_name_regexp.sub(r\"_\\1\", cls.__name__).lower()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.CommonTableAttributes.__tablename__","title":"<code>__tablename__()</code>","text":"<p>Infer table name from class name.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@declared_attr.directive\ndef __tablename__(cls) -&gt; str:  # noqa: N805\n    \"\"\"Infer table name from class name.\"\"\"\n    return table_name_regexp.sub(r\"_\\1\", cls.__name__).lower()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.ModelProtocol","title":"<code>ModelProtocol</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>The base SQLAlchemy model protocol.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@runtime_checkable\nclass ModelProtocol(Protocol):\n    \"\"\"The base SQLAlchemy model protocol.\"\"\"\n\n    __table__: FromClause\n    __mapper__: Mapper[Any]\n    __name__: str\n\n    def to_dict(self, exclude: set[str] | None = None) -&gt; dict[str, Any]:\n        \"\"\"Convert model to dictionary.\n\n        Returns\n        -------\n            dict[str, Any]: A dict representation of the model\n        \"\"\"\n        ...\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.ModelProtocol.to_dict","title":"<code>to_dict(exclude=None)</code>","text":"<p>Convert model to dictionary.</p> RETURNS DESCRIPTION <code>    dict[str, Any]: A dict representation of the model</code> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>def to_dict(self, exclude: set[str] | None = None) -&gt; dict[str, Any]:\n    \"\"\"Convert model to dictionary.\n\n    Returns\n    -------\n        dict[str, Any]: A dict representation of the model\n    \"\"\"\n    ...\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.SQLQuery","title":"<code>SQLQuery</code>","text":"<p>               Bases: <code>BasicAttributes</code>, <code>DeclarativeBase</code></p> <p>Base for all SQLAlchemy custom mapped objects.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class SQLQuery(BasicAttributes, DeclarativeBase):\n    \"\"\"Base for all SQLAlchemy custom mapped objects.\"\"\"\n\n    __allow_unmapped__ = True\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.SlugKey","title":"<code>SlugKey</code>","text":"<p>Slug unique Field Model Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@declarative_mixin\nclass SlugKey:\n    \"\"\"Slug unique Field Model Mixin.\"\"\"\n\n    @declared_attr\n    def slug(cls) -&gt; Mapped[str]:  # noqa: N805\n        \"\"\"Slug field.\"\"\"\n        return mapped_column(\n            String(length=100),\n            nullable=False,\n        )\n\n    @staticmethod\n    def _create_unique_slug_index(*_args: Any, **kwargs: Any) -&gt; bool:\n        return bool(kwargs[\"dialect\"].name.startswith(\"spanner\"))\n\n    @staticmethod\n    def _create_unique_slug_constraint(*_args: Any, **kwargs: Any) -&gt; bool:\n        return not kwargs[\"dialect\"].name.startswith(\"spanner\")\n\n    @declared_attr.directive\n    @classmethod\n    def __table_args__(cls) -&gt; TableArgsType:\n        \"\"\"Define table arguments for unique slug constraints and indexes.\"\"\"\n        return (\n            UniqueConstraint(\n                cls.slug,\n                name=f\"uq_{cls.__tablename__}_slug\",  # type: ignore[attr-defined]\n            ).ddl_if(callable_=cls._create_unique_slug_constraint),\n            Index(\n                f\"ix_{cls.__tablename__}_slug_unique\",  # type: ignore[attr-defined]\n                cls.slug,\n                unique=True,\n            ).ddl_if(callable_=cls._create_unique_slug_index),\n        )\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.SlugKey.__table_args__","title":"<code>__table_args__()</code>  <code>classmethod</code>","text":"<p>Define table arguments for unique slug constraints and indexes.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@declared_attr.directive\n@classmethod\ndef __table_args__(cls) -&gt; TableArgsType:\n    \"\"\"Define table arguments for unique slug constraints and indexes.\"\"\"\n    return (\n        UniqueConstraint(\n            cls.slug,\n            name=f\"uq_{cls.__tablename__}_slug\",  # type: ignore[attr-defined]\n        ).ddl_if(callable_=cls._create_unique_slug_constraint),\n        Index(\n            f\"ix_{cls.__tablename__}_slug_unique\",  # type: ignore[attr-defined]\n            cls.slug,\n            unique=True,\n        ).ddl_if(callable_=cls._create_unique_slug_index),\n    )\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.SlugKey.slug","title":"<code>slug()</code>","text":"<p>Slug field.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>@declared_attr\ndef slug(cls) -&gt; Mapped[str]:  # noqa: N805\n    \"\"\"Slug field.\"\"\"\n    return mapped_column(\n        String(length=100),\n        nullable=False,\n    )\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDAuditBase","title":"<code>UUIDAuditBase</code>","text":"<p>               Bases: <code>CommonTableAttributes</code>, <code>UUIDPrimaryKey</code>, <code>AuditColumns</code>, <code>DeclarativeBase</code></p> <p>Base for declarative models with UUID primary keys and audit columns.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDAuditBase(CommonTableAttributes, UUIDPrimaryKey, AuditColumns, DeclarativeBase):\n    \"\"\"Base for declarative models with UUID primary keys and audit columns.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDBase","title":"<code>UUIDBase</code>","text":"<p>               Bases: <code>UUIDPrimaryKey</code>, <code>CommonTableAttributes</code>, <code>DeclarativeBase</code></p> <p>Base for all SQLAlchemy declarative models with UUID primary keys.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDBase(UUIDPrimaryKey, CommonTableAttributes, DeclarativeBase):\n    \"\"\"Base for all SQLAlchemy declarative models with UUID primary keys.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDPrimaryKey","title":"<code>UUIDPrimaryKey</code>","text":"<p>UUID Primary Key Field Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDPrimaryKey:\n    \"\"\"UUID Primary Key Field Mixin.\"\"\"\n\n    id: Mapped[UUID] = mapped_column(default=uuid4, primary_key=True)\n    \"\"\"UUID Primary key column.\"\"\"\n\n    @declared_attr\n    def _sentinel(cls) -&gt; Mapped[int]:  # noqa: N805\n        return orm_insert_sentinel(name=\"sa_orm_sentinel\")\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDPrimaryKey.id","title":"<code>id = mapped_column(default=uuid4, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UUID Primary key column.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv6AuditBase","title":"<code>UUIDv6AuditBase</code>","text":"<p>               Bases: <code>CommonTableAttributes</code>, <code>UUIDv6PrimaryKey</code>, <code>AuditColumns</code>, <code>DeclarativeBase</code></p> <p>Base for declarative models with UUID primary keys and audit columns.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv6AuditBase(CommonTableAttributes, UUIDv6PrimaryKey, AuditColumns, DeclarativeBase):\n    \"\"\"Base for declarative models with UUID primary keys and audit columns.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv6Base","title":"<code>UUIDv6Base</code>","text":"<p>               Bases: <code>UUIDv6PrimaryKey</code>, <code>CommonTableAttributes</code>, <code>DeclarativeBase</code></p> <p>Base for all SQLAlchemy declarative models with UUID primary keys.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv6Base(UUIDv6PrimaryKey, CommonTableAttributes, DeclarativeBase):\n    \"\"\"Base for all SQLAlchemy declarative models with UUID primary keys.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv6PrimaryKey","title":"<code>UUIDv6PrimaryKey</code>","text":"<p>UUID v6 Primary Key Field Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv6PrimaryKey:\n    \"\"\"UUID v6 Primary Key Field Mixin.\"\"\"\n\n    id: Mapped[UUID] = mapped_column(default=uuid6, primary_key=True)\n    \"\"\"UUID Primary key column.\"\"\"\n\n    @declared_attr\n    def _sentinel(cls) -&gt; Mapped[int]:  # noqa: N805\n        return orm_insert_sentinel(name=\"sa_orm_sentinel\")\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv6PrimaryKey.id","title":"<code>id = mapped_column(default=uuid6, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UUID Primary key column.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv7AuditBase","title":"<code>UUIDv7AuditBase</code>","text":"<p>               Bases: <code>CommonTableAttributes</code>, <code>UUIDv7PrimaryKey</code>, <code>AuditColumns</code></p> <p>Base for declarative models with UUID primary keys and audit columns.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv7AuditBase(CommonTableAttributes, UUIDv7PrimaryKey, AuditColumns):\n    \"\"\"Base for declarative models with UUID primary keys and audit columns.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv7Base","title":"<code>UUIDv7Base</code>","text":"<p>               Bases: <code>UUIDv7PrimaryKey</code>, <code>CommonTableAttributes</code>, <code>DeclarativeBase</code></p> <p>Base for all SQLAlchemy declarative models with UUID primary keys.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv7Base(UUIDv7PrimaryKey, CommonTableAttributes, DeclarativeBase):\n    \"\"\"Base for all SQLAlchemy declarative models with UUID primary keys.\"\"\"\n\n    registry = orm_registry\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv7PrimaryKey","title":"<code>UUIDv7PrimaryKey</code>","text":"<p>UUID v7 Primary Key Field Mixin.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>class UUIDv7PrimaryKey:\n    \"\"\"UUID v7 Primary Key Field Mixin.\"\"\"\n\n    id: Mapped[UUID] = mapped_column(default=uuid7, primary_key=True)\n    \"\"\"UUID Primary key column.\"\"\"\n\n    @declared_attr\n    def _sentinel(cls) -&gt; Mapped[int]:  # noqa: N805\n        return orm_insert_sentinel(name=\"sa_orm_sentinel\")\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.UUIDv7PrimaryKey.id","title":"<code>id = mapped_column(default=uuid7, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>UUID Primary key column.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.create_registry","title":"<code>create_registry(custom_annotation_map=None)</code>","text":"<p>Create a new SQLAlchemy registry.</p> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>def create_registry(\n    custom_annotation_map: dict[Any, type[TypeEngine[Any]] | TypeEngine[Any]] | None = None,\n) -&gt; registry:\n    \"\"\"Create a new SQLAlchemy registry.\"\"\"\n    import uuid as core_uuid\n\n    meta = MetaData(naming_convention=convention)\n    type_annotation_map: dict[Any, type[TypeEngine[Any]] | TypeEngine[Any]] = {\n        UUID: GUID,\n        core_uuid.UUID: GUID,\n        datetime: DateTimeUTC,\n        date: Date,\n        dict: JsonB,\n    }\n    with contextlib.suppress(ImportError):\n        from pydantic import AnyHttpUrl, AnyUrl, EmailStr, Json\n\n        type_annotation_map.update(\n            {EmailStr: String, AnyUrl: String, AnyHttpUrl: String, Json: JsonB}\n        )\n    with contextlib.suppress(ImportError):\n        from msgspec import Struct\n\n        type_annotation_map[Struct] = JsonB\n    if custom_annotation_map is not None:\n        type_annotation_map.update(custom_annotation_map)\n    return registry(metadata=meta, type_annotation_map=type_annotation_map)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/base/#src.demo_bd.core.db.base.merge_table_arguments","title":"<code>merge_table_arguments(cls, table_args=None)</code>","text":"<p>Merge Table Arguments.</p> <p>When using mixins that include their own table args, it is difficult to append info into the model such as a comment.</p> <p>This function helps you merge the args together.</p> <p>Args:     cls (DeclarativeBase): This is the model that will get the table args     table_args: additional information to add to table_args</p> RETURNS DESCRIPTION <code>    tuple | dict: The merged __table_args__ property</code> Source code in <code>src/demo_bd/core/db/base.py</code> <pre><code>def merge_table_arguments(\n    cls: type[DeclarativeBase], table_args: TableArgsType | None = None\n) -&gt; TableArgsType:\n    \"\"\"Merge Table Arguments.\n\n    When using mixins that include their own table args, it is difficult to append info into the model such as a comment.\n\n    This function helps you merge the args together.\n\n    Args:\n        cls (DeclarativeBase): This is the model that will get the table args\n        table_args: additional information to add to table_args\n\n    Returns\n    -------\n        tuple | dict: The merged __table_args__ property\n    \"\"\"\n    args: list[Any] = []\n    kwargs: dict[str, Any] = {}\n\n    mixin_table_args = (\n        getattr(super(base_cls, cls), \"__table_args__\", None) for base_cls in cls.__bases__\n    )  # pyright: ignore[reportUnknownParameter,reportUnknownArgumentType,reportArgumentType]\n\n    for arg_to_merge in (*mixin_table_args, table_args):\n        if arg_to_merge:\n            if isinstance(arg_to_merge, tuple):\n                last_positional_arg = arg_to_merge[-1]\n                args.extend(arg_to_merge[:-1])\n                if isinstance(last_positional_arg, dict):\n                    kwargs.update(last_positional_arg)  # pyright: ignore[reportUnknownArgumentType]\n                else:\n                    args.append(last_positional_arg)\n            else:\n                kwargs.update(arg_to_merge)\n\n    if args:\n        if kwargs:\n            return (*args, kwargs)\n        return tuple(args)\n    return kwargs\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/manager/","title":"Manager","text":"<p>Database manager and SQLAlchemy configuration for demo_bd.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/","title":"Index","text":"<p>Demo BD database core.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/datetime/","title":"Datetime","text":"<p>Custom SQLAlchemy type for timezone-aware UTC DateTime columns.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/datetime/#src.demo_bd.core.db.types.datetime.DateTimeUTC","title":"<code>DateTimeUTC</code>","text":"<p>               Bases: <code>TypeDecorator[datetime]</code></p> <p>Timezone Aware DateTime.</p> <p>Ensure UTC is stored in the database and that TZ aware dates are returned for all dialects.</p> Source code in <code>src/demo_bd/core/db/types/datetime.py</code> <pre><code>class DateTimeUTC(TypeDecorator[datetime.datetime]):\n    \"\"\"Timezone Aware DateTime.\n\n    Ensure UTC is stored in the database and that TZ aware dates are returned for all dialects.\n    \"\"\"\n\n    impl = DateTime(timezone=True)\n    cache_ok = True\n\n    @property\n    def python_type(self) -&gt; type[datetime.datetime]:\n        \"\"\"Return the Python type handled by this custom type (datetime.datetime).\"\"\"\n        return datetime.datetime\n\n    def process_bind_param(\n        self, value: datetime.datetime | None, dialect: Dialect\n    ) -&gt; datetime.datetime | None:\n        \"\"\"Process a value before sending to the database, ensuring it is timezone-aware and in UTC.\"\"\"\n        if value is None:\n            return value\n        if not value.tzinfo:\n            msg = \"tzinfo is required\"\n            raise TypeError(msg)\n        return value.astimezone(datetime.UTC)\n\n    def process_result_value(\n        self, value: datetime.datetime | None, dialect: Dialect\n    ) -&gt; datetime.datetime | None:\n        \"\"\"Process a value after retrieving from the database, ensuring it is timezone-aware and in UTC.\"\"\"\n        if value is None:\n            return value\n        if value.tzinfo is None:\n            return value.replace(tzinfo=datetime.UTC)\n        return value\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/datetime/#src.demo_bd.core.db.types.datetime.DateTimeUTC.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the Python type handled by this custom type (datetime.datetime).</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/datetime/#src.demo_bd.core.db.types.datetime.DateTimeUTC.process_bind_param","title":"<code>process_bind_param(value, dialect)</code>","text":"<p>Process a value before sending to the database, ensuring it is timezone-aware and in UTC.</p> Source code in <code>src/demo_bd/core/db/types/datetime.py</code> <pre><code>def process_bind_param(\n    self, value: datetime.datetime | None, dialect: Dialect\n) -&gt; datetime.datetime | None:\n    \"\"\"Process a value before sending to the database, ensuring it is timezone-aware and in UTC.\"\"\"\n    if value is None:\n        return value\n    if not value.tzinfo:\n        msg = \"tzinfo is required\"\n        raise TypeError(msg)\n    return value.astimezone(datetime.UTC)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/datetime/#src.demo_bd.core.db.types.datetime.DateTimeUTC.process_result_value","title":"<code>process_result_value(value, dialect)</code>","text":"<p>Process a value after retrieving from the database, ensuring it is timezone-aware and in UTC.</p> Source code in <code>src/demo_bd/core/db/types/datetime.py</code> <pre><code>def process_result_value(\n    self, value: datetime.datetime | None, dialect: Dialect\n) -&gt; datetime.datetime | None:\n    \"\"\"Process a value after retrieving from the database, ensuring it is timezone-aware and in UTC.\"\"\"\n    if value is None:\n        return value\n    if value.tzinfo is None:\n        return value.replace(tzinfo=datetime.UTC)\n    return value\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/","title":"Encrypted string","text":"<p>Database field types for encrypted strings.</p> <p>Provides SQLAlchemy-compatible types and encryption backends for storing encrypted string and text values in the database, supporting both Fernet and PostgreSQL pgcrypto backends.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString","title":"<code>EncryptedString</code>","text":"<p>               Bases: <code>TypeDecorator[str]</code></p> <p>Used to store encrypted values in a database.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>class EncryptedString(TypeDecorator[str]):\n    \"\"\"Used to store encrypted values in a database.\"\"\"\n\n    impl = String\n    cache_ok = True\n\n    def __init__(\n        self,\n        key: str | bytes | Callable[[], str | bytes] | None = None,\n        backend: type[EncryptionBackend] = FernetBackend,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__()\n        if key is None:\n            key = os.urandom(32)\n        self.key = key\n        self.backend = backend()\n\n    @property\n    def python_type(self) -&gt; type[str]:\n        \"\"\"Return the Python type handled by this custom type.\n\n        Returns\n        -------\n            type[str]: The Python type (str) handled by this type.\n        \"\"\"\n        return str\n\n    def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n        \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n        Args:\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            Any: The SQLAlchemy type descriptor appropriate for the dialect.\n        \"\"\"\n        if dialect.name in {\"mysql\", \"mariadb\"}:\n            return dialect.type_descriptor(Text())\n        if dialect.name == \"oracle\":\n            return dialect.type_descriptor(String(length=4000))\n        return dialect.type_descriptor(String())\n\n    def process_bind_param(self, value: Any, dialect: Dialect) -&gt; str | None:\n        \"\"\"Encrypt the value before storing it in the database.\n\n        Args:\n            value (Any): The value to be encrypted and stored.\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            str | None: The encrypted value as a string, or None if value is None.\n        \"\"\"\n        if value is None:\n            return value\n        self.mount_vault()\n        return self.backend.encrypt(value)\n\n    def process_result_value(self, value: Any, dialect: Dialect) -&gt; str | None:\n        \"\"\"Decrypt the value after retrieving it from the database.\n\n        Args:\n            value (Any): The value to be decrypted after retrieval.\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            str | None: The decrypted value as a string, or None if value is None.\n        \"\"\"\n        if value is None:\n            return value\n        self.mount_vault()\n        return self.backend.decrypt(value)\n\n    def mount_vault(self) -&gt; None:\n        \"\"\"Mount the encryption vault using the configured key.\n\n        This method resolves the encryption key, calling it if it is a callable,\n        and mounts the vault in the backend with the resolved key.\n        \"\"\"\n        key = self.key() if callable(self.key) else self.key\n        self.backend.mount_vault(key)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the Python type handled by this custom type.</p> RETURNS DESCRIPTION <code>    type[str]: The Python type (str) handled by this type.</code>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString.load_dialect_impl","title":"<code>load_dialect_impl(dialect)</code>","text":"<p>Return the appropriate SQLAlchemy type for the given dialect.</p> <p>Args:     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    Any: The SQLAlchemy type descriptor appropriate for the dialect.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n    \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n    Args:\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        Any: The SQLAlchemy type descriptor appropriate for the dialect.\n    \"\"\"\n    if dialect.name in {\"mysql\", \"mariadb\"}:\n        return dialect.type_descriptor(Text())\n    if dialect.name == \"oracle\":\n        return dialect.type_descriptor(String(length=4000))\n    return dialect.type_descriptor(String())\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString.mount_vault","title":"<code>mount_vault()</code>","text":"<p>Mount the encryption vault using the configured key.</p> <p>This method resolves the encryption key, calling it if it is a callable, and mounts the vault in the backend with the resolved key.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def mount_vault(self) -&gt; None:\n    \"\"\"Mount the encryption vault using the configured key.\n\n    This method resolves the encryption key, calling it if it is a callable,\n    and mounts the vault in the backend with the resolved key.\n    \"\"\"\n    key = self.key() if callable(self.key) else self.key\n    self.backend.mount_vault(key)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString.process_bind_param","title":"<code>process_bind_param(value, dialect)</code>","text":"<p>Encrypt the value before storing it in the database.</p> <p>Args:     value (Any): The value to be encrypted and stored.     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    str | None: The encrypted value as a string, or None if value is None.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def process_bind_param(self, value: Any, dialect: Dialect) -&gt; str | None:\n    \"\"\"Encrypt the value before storing it in the database.\n\n    Args:\n        value (Any): The value to be encrypted and stored.\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        str | None: The encrypted value as a string, or None if value is None.\n    \"\"\"\n    if value is None:\n        return value\n    self.mount_vault()\n    return self.backend.encrypt(value)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedString.process_result_value","title":"<code>process_result_value(value, dialect)</code>","text":"<p>Decrypt the value after retrieving it from the database.</p> <p>Args:     value (Any): The value to be decrypted after retrieval.     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    str | None: The decrypted value as a string, or None if value is None.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def process_result_value(self, value: Any, dialect: Dialect) -&gt; str | None:\n    \"\"\"Decrypt the value after retrieving it from the database.\n\n    Args:\n        value (Any): The value to be decrypted after retrieval.\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        str | None: The decrypted value as a string, or None if value is None.\n    \"\"\"\n    if value is None:\n        return value\n    self.mount_vault()\n    return self.backend.decrypt(value)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedText","title":"<code>EncryptedText</code>","text":"<p>               Bases: <code>EncryptedString</code></p> <p>Encrypted text (CLOB) type for storing encrypted large text values in the database.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>class EncryptedText(EncryptedString):\n    \"\"\"Encrypted text (CLOB) type for storing encrypted large text values in the database.\"\"\"\n\n    impl = Text\n    cache_ok = True\n\n    def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n        \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n        Args:\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            Any: The SQLAlchemy type descriptor appropriate for the dialect.\n        \"\"\"\n        return dialect.type_descriptor(Text())\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptedText.load_dialect_impl","title":"<code>load_dialect_impl(dialect)</code>","text":"<p>Return the appropriate SQLAlchemy type for the given dialect.</p> <p>Args:     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    Any: The SQLAlchemy type descriptor appropriate for the dialect.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n    \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n    Args:\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        Any: The SQLAlchemy type descriptor appropriate for the dialect.\n    \"\"\"\n    return dialect.type_descriptor(Text())\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptionBackend","title":"<code>EncryptionBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for encryption backends.</p> <p>Defines the interface for mounting a vault, initializing the engine, and encrypting/decrypting values for use with SQLAlchemy types.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>class EncryptionBackend(abc.ABC):\n    \"\"\"Abstract base class for encryption backends.\n\n    Defines the interface for mounting a vault, initializing the engine,\n    and encrypting/decrypting values for use with SQLAlchemy types.\n    \"\"\"\n\n    def mount_vault(self, key: str | bytes) -&gt; None:\n        \"\"\"Mount the encryption vault with the provided key.\n\n        Args:\n            key (str | bytes): The encryption key to use for mounting the vault.\n        \"\"\"\n        if isinstance(key, str):\n            key = key.encode()\n\n    @abc.abstractmethod\n    def init_engine(self, key: bytes | str) -&gt; None:  # pragma: nocover\n        \"\"\"Initialize the encryption engine with the provided key.\n\n        Args:\n            key (bytes | str): The encryption key to initialize the engine.\n        \"\"\"\n\n    @abc.abstractmethod\n    def encrypt(self, value: Any) -&gt; str:  # pragma: nocover\n        \"\"\"Encrypt the given value and return the encrypted string.\n\n        Args:\n            value (Any): The value to encrypt.\n\n        Returns\n        -------\n            str: The encrypted value as a string.\n        \"\"\"\n\n    @abc.abstractmethod\n    def decrypt(self, value: Any) -&gt; str:  # pragma: nocover\n        \"\"\"Decrypt the given value and return the decrypted string.\n\n        Args:\n            value (Any): The value to decrypt.\n\n        Returns\n        -------\n            str: The decrypted value as a string.\n        \"\"\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptionBackend.decrypt","title":"<code>decrypt(value)</code>  <code>abstractmethod</code>","text":"<p>Decrypt the given value and return the decrypted string.</p> <p>Args:     value (Any): The value to decrypt.</p> RETURNS DESCRIPTION <code>    str: The decrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>@abc.abstractmethod\ndef decrypt(self, value: Any) -&gt; str:  # pragma: nocover\n    \"\"\"Decrypt the given value and return the decrypted string.\n\n    Args:\n        value (Any): The value to decrypt.\n\n    Returns\n    -------\n        str: The decrypted value as a string.\n    \"\"\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptionBackend.encrypt","title":"<code>encrypt(value)</code>  <code>abstractmethod</code>","text":"<p>Encrypt the given value and return the encrypted string.</p> <p>Args:     value (Any): The value to encrypt.</p> RETURNS DESCRIPTION <code>    str: The encrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>@abc.abstractmethod\ndef encrypt(self, value: Any) -&gt; str:  # pragma: nocover\n    \"\"\"Encrypt the given value and return the encrypted string.\n\n    Args:\n        value (Any): The value to encrypt.\n\n    Returns\n    -------\n        str: The encrypted value as a string.\n    \"\"\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptionBackend.init_engine","title":"<code>init_engine(key)</code>  <code>abstractmethod</code>","text":"<p>Initialize the encryption engine with the provided key.</p> <p>Args:     key (bytes | str): The encryption key to initialize the engine.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>@abc.abstractmethod\ndef init_engine(self, key: bytes | str) -&gt; None:  # pragma: nocover\n    \"\"\"Initialize the encryption engine with the provided key.\n\n    Args:\n        key (bytes | str): The encryption key to initialize the engine.\n    \"\"\"\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.EncryptionBackend.mount_vault","title":"<code>mount_vault(key)</code>","text":"<p>Mount the encryption vault with the provided key.</p> <p>Args:     key (str | bytes): The encryption key to use for mounting the vault.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def mount_vault(self, key: str | bytes) -&gt; None:\n    \"\"\"Mount the encryption vault with the provided key.\n\n    Args:\n        key (str | bytes): The encryption key to use for mounting the vault.\n    \"\"\"\n    if isinstance(key, str):\n        key = key.encode()\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.FernetBackend","title":"<code>FernetBackend</code>","text":"<p>               Bases: <code>EncryptionBackend</code></p> <p>Encryption Using a Fernet backend.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>class FernetBackend(EncryptionBackend):\n    \"\"\"Encryption Using a Fernet backend.\"\"\"\n\n    def mount_vault(self, key: str | bytes) -&gt; None:\n        \"\"\"Mount the encryption vault with the provided key.\n\n        Args:\n            key (str | bytes): The encryption key to use for mounting the vault.\n        \"\"\"\n        if isinstance(key, str):\n            key = key.encode()\n        digest = hashes.Hash(hashes.SHA256(), backend=default_backend())  # pyright: ignore[reportPossiblyUnboundVariable]\n        digest.update(key)\n        engine_key = digest.finalize()\n        self.init_engine(engine_key)\n\n    def init_engine(self, key: bytes | str) -&gt; None:\n        \"\"\"Initialize the Fernet encryption engine with the provided key.\n\n        Args:\n            key (bytes | str): The encryption key to initialize the Fernet engine.\n        \"\"\"\n        if isinstance(key, str):\n            key = key.encode()\n        self.key = base64.urlsafe_b64encode(key)\n        self.fernet = Fernet(self.key)  # pyright: ignore[reportPossiblyUnboundVariable]\n\n    def encrypt(self, value: Any) -&gt; str:\n        \"\"\"Encrypt the given value and return the encrypted string.\n\n        Args:\n            value (Any): The value to encrypt.\n\n        Returns\n        -------\n            str: The encrypted value as a string.\n        \"\"\"\n        if not isinstance(value, str):\n            value = repr(value)\n        value = value.encode()\n        encrypted = self.fernet.encrypt(value)\n        return encrypted.decode(\"utf-8\")\n\n    def decrypt(self, value: Any) -&gt; str:\n        \"\"\"Decrypt the given value and return the decrypted string.\n\n        Args:\n            value (Any): The value to decrypt.\n\n        Returns\n        -------\n            str: The decrypted value as a string.\n        \"\"\"\n        if not isinstance(value, str):  # pragma: nocover\n            value = str(value)\n        decrypted: str | bytes = self.fernet.decrypt(value.encode())\n        if not isinstance(decrypted, str):\n            decrypted = decrypted.decode(\"utf-8\")\n        return decrypted\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.FernetBackend.decrypt","title":"<code>decrypt(value)</code>","text":"<p>Decrypt the given value and return the decrypted string.</p> <p>Args:     value (Any): The value to decrypt.</p> RETURNS DESCRIPTION <code>    str: The decrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def decrypt(self, value: Any) -&gt; str:\n    \"\"\"Decrypt the given value and return the decrypted string.\n\n    Args:\n        value (Any): The value to decrypt.\n\n    Returns\n    -------\n        str: The decrypted value as a string.\n    \"\"\"\n    if not isinstance(value, str):  # pragma: nocover\n        value = str(value)\n    decrypted: str | bytes = self.fernet.decrypt(value.encode())\n    if not isinstance(decrypted, str):\n        decrypted = decrypted.decode(\"utf-8\")\n    return decrypted\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.FernetBackend.encrypt","title":"<code>encrypt(value)</code>","text":"<p>Encrypt the given value and return the encrypted string.</p> <p>Args:     value (Any): The value to encrypt.</p> RETURNS DESCRIPTION <code>    str: The encrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def encrypt(self, value: Any) -&gt; str:\n    \"\"\"Encrypt the given value and return the encrypted string.\n\n    Args:\n        value (Any): The value to encrypt.\n\n    Returns\n    -------\n        str: The encrypted value as a string.\n    \"\"\"\n    if not isinstance(value, str):\n        value = repr(value)\n    value = value.encode()\n    encrypted = self.fernet.encrypt(value)\n    return encrypted.decode(\"utf-8\")\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.FernetBackend.init_engine","title":"<code>init_engine(key)</code>","text":"<p>Initialize the Fernet encryption engine with the provided key.</p> <p>Args:     key (bytes | str): The encryption key to initialize the Fernet engine.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def init_engine(self, key: bytes | str) -&gt; None:\n    \"\"\"Initialize the Fernet encryption engine with the provided key.\n\n    Args:\n        key (bytes | str): The encryption key to initialize the Fernet engine.\n    \"\"\"\n    if isinstance(key, str):\n        key = key.encode()\n    self.key = base64.urlsafe_b64encode(key)\n    self.fernet = Fernet(self.key)  # pyright: ignore[reportPossiblyUnboundVariable]\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.FernetBackend.mount_vault","title":"<code>mount_vault(key)</code>","text":"<p>Mount the encryption vault with the provided key.</p> <p>Args:     key (str | bytes): The encryption key to use for mounting the vault.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def mount_vault(self, key: str | bytes) -&gt; None:\n    \"\"\"Mount the encryption vault with the provided key.\n\n    Args:\n        key (str | bytes): The encryption key to use for mounting the vault.\n    \"\"\"\n    if isinstance(key, str):\n        key = key.encode()\n    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())  # pyright: ignore[reportPossiblyUnboundVariable]\n    digest.update(key)\n    engine_key = digest.finalize()\n    self.init_engine(engine_key)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.PGCryptoBackend","title":"<code>PGCryptoBackend</code>","text":"<p>               Bases: <code>EncryptionBackend</code></p> <p>PG Crypto backend.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>class PGCryptoBackend(EncryptionBackend):\n    \"\"\"PG Crypto backend.\"\"\"\n\n    def init_engine(self, key: bytes | str) -&gt; None:\n        \"\"\"Initialize the encryption engine with the provided key.\n\n        Args:\n            key (bytes | str): The encryption key to initialize the engine.\n        \"\"\"\n        if isinstance(key, str):\n            key = key.encode()\n        self.passphrase = base64.urlsafe_b64encode(key)\n\n    def encrypt(self, value: Any) -&gt; str:\n        \"\"\"Encrypt the given value and return the encrypted string.\n\n        Args:\n            value (Any): The value to encrypt.\n\n        Returns\n        -------\n            str: The encrypted value as a string.\n        \"\"\"\n        if not isinstance(value, str):  # pragma: nocover\n            value = repr(value)\n        value = value.encode()\n        return sql_func.pgp_sym_encrypt(value, self.passphrase)  # type: ignore[return-value]\n\n    def decrypt(self, value: Any) -&gt; str:\n        \"\"\"Decrypt the given value and return the decrypted string.\n\n        Args:\n            value (Any): The value to decrypt.\n\n        Returns\n        -------\n            str: The decrypted value as a string.\n        \"\"\"\n        if not isinstance(value, str):  # pragma: nocover\n            value = str(value)\n        return sql_func.pgp_sym_decrypt(value, self.passphrase)  # type: ignore[return-value]\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.PGCryptoBackend.decrypt","title":"<code>decrypt(value)</code>","text":"<p>Decrypt the given value and return the decrypted string.</p> <p>Args:     value (Any): The value to decrypt.</p> RETURNS DESCRIPTION <code>    str: The decrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def decrypt(self, value: Any) -&gt; str:\n    \"\"\"Decrypt the given value and return the decrypted string.\n\n    Args:\n        value (Any): The value to decrypt.\n\n    Returns\n    -------\n        str: The decrypted value as a string.\n    \"\"\"\n    if not isinstance(value, str):  # pragma: nocover\n        value = str(value)\n    return sql_func.pgp_sym_decrypt(value, self.passphrase)  # type: ignore[return-value]\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.PGCryptoBackend.encrypt","title":"<code>encrypt(value)</code>","text":"<p>Encrypt the given value and return the encrypted string.</p> <p>Args:     value (Any): The value to encrypt.</p> RETURNS DESCRIPTION <code>    str: The encrypted value as a string.</code> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def encrypt(self, value: Any) -&gt; str:\n    \"\"\"Encrypt the given value and return the encrypted string.\n\n    Args:\n        value (Any): The value to encrypt.\n\n    Returns\n    -------\n        str: The encrypted value as a string.\n    \"\"\"\n    if not isinstance(value, str):  # pragma: nocover\n        value = repr(value)\n    value = value.encode()\n    return sql_func.pgp_sym_encrypt(value, self.passphrase)  # type: ignore[return-value]\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/encrypted_string/#src.demo_bd.core.db.types.encrypted_string.PGCryptoBackend.init_engine","title":"<code>init_engine(key)</code>","text":"<p>Initialize the encryption engine with the provided key.</p> <p>Args:     key (bytes | str): The encryption key to initialize the engine.</p> Source code in <code>src/demo_bd/core/db/types/encrypted_string.py</code> <pre><code>def init_engine(self, key: bytes | str) -&gt; None:\n    \"\"\"Initialize the encryption engine with the provided key.\n\n    Args:\n        key (bytes | str): The encryption key to initialize the engine.\n    \"\"\"\n    if isinstance(key, str):\n        key = key.encode()\n    self.passphrase = base64.urlsafe_b64encode(key)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/","title":"Guid","text":"<p>GUID (Globally Unique Identifier) SQLAlchemy type for cross-database compatibility.</p> <p>Provides a platform-independent GUID/UUID type for SQLAlchemy models, supporting PostgreSQL, MSSQL, Oracle, and generic databases. Handles conversion between UUID, string, and binary representations as needed for each backend.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID","title":"<code>GUID</code>","text":"<p>               Bases: <code>TypeDecorator[UUID]</code></p> <p>Platform-independent GUID type.</p> <p>Uses PostgreSQL's UUID type (Postgres, DuckDB, Cockroach), MSSQL's UNIQUEIDENTIFIER type, Oracle's RAW(16) type, otherwise uses BINARY(16) or CHAR(32), storing as stringified hex values.</p> <p>Will accept stringified UUIDs as a hexstring or an actual UUID</p> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>class GUID(TypeDecorator[UUID]):\n    \"\"\"Platform-independent GUID type.\n\n    Uses PostgreSQL's UUID type (Postgres, DuckDB, Cockroach),\n    MSSQL's UNIQUEIDENTIFIER type, Oracle's RAW(16) type,\n    otherwise uses BINARY(16) or CHAR(32),\n    storing as stringified hex values.\n\n    Will accept stringified UUIDs as a hexstring or an actual UUID\n\n    \"\"\"\n\n    impl = BINARY(16)\n    cache_ok = True\n\n    @property\n    def python_type(self) -&gt; type[UUID]:\n        \"\"\"Return the Python type handled by this custom GUID type.\"\"\"\n        return UUID\n\n    def __init__(self, *args: Any, binary: bool = True, **kwargs: Any) -&gt; None:\n        \"\"\"Initialize the GUID type.\n\n        Args:\n            *args: Positional arguments passed to the base TypeDecorator.\n            binary (bool): Whether to store the UUID as binary (default: True).\n            **kwargs: Additional keyword arguments passed to the base TypeDecorator.\n        \"\"\"\n        self.binary = binary\n\n    def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n        \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n        Args:\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            Any: The SQLAlchemy type descriptor for the GUID/UUID type.\n        \"\"\"\n        if dialect.name in {\"postgresql\", \"duckdb\", \"cockroachdb\"}:\n            return dialect.type_descriptor(PG_UUID())\n        if dialect.name == \"oracle\":\n            return dialect.type_descriptor(ORA_RAW(16))\n        if dialect.name == \"mssql\":\n            return dialect.type_descriptor(MSSQL_UNIQUEIDENTIFIER())\n        if self.binary:\n            return dialect.type_descriptor(BINARY(16))\n        return dialect.type_descriptor(CHAR(32))\n\n    def process_bind_param(\n        self,\n        value: bytes | str | UUID | None,\n        dialect: Dialect,\n    ) -&gt; bytes | str | None:\n        \"\"\"Process the value before sending it to the database.\n\n        Converts the input value to the appropriate format (string, bytes, or hex)\n        depending on the database dialect and the binary setting.\n\n        Args:\n            value (bytes | str | UUID | None): The value to be processed.\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            bytes | str | None: The processed value suitable for the target database.\n        \"\"\"\n        if value is None:\n            return value\n        if dialect.name in {\"postgresql\", \"duckdb\", \"cockroachdb\", \"mssql\"}:\n            return str(value)\n        value = self.to_uuid(value)\n        if value is None:\n            return value\n        if dialect.name in {\"oracle\", \"spanner+spanner\"}:\n            return value.bytes\n        return value.bytes if self.binary else value.hex\n\n    def process_result_value(\n        self,\n        value: bytes | str | UUID | None,\n        dialect: Dialect,\n    ) -&gt; UUID | None:\n        \"\"\"Process the value returned from the database.\n\n        Converts the database value to a UUID instance or None, depending on the\n        input type and the database dialect.\n\n        Args:\n            value (bytes | str | UUID | None): The value returned from the database.\n            dialect (Dialect): The SQLAlchemy dialect in use.\n\n        Returns\n        -------\n            UUID | None: The processed UUID value or None.\n        \"\"\"\n        if value is None:\n            return value\n        if value.__class__.__name__ == \"UUID\":\n            return cast(\"UUID\", value)\n        if dialect.name == \"spanner+spanner\":\n            return UUID(bytes=b64decode(cast(\"str | Buffer\", value)))\n        if self.binary:\n            return UUID(bytes=cast(\"bytes\", value))\n        return UUID(hex=cast(\"str\", value))\n\n    @staticmethod\n    def to_uuid(value: Any) -&gt; UUID | None:\n        \"\"\"Convert a value to a UUID instance or None.\n\n        Attempts to convert the input value to a UUID object. If the value is already a UUID\n        or None, it is returned as is. Otherwise, tries to create a UUID from a hex string,\n        and if that fails, from bytes.\n\n        Args:\n            value (Any): The value to convert.\n\n        Returns\n        -------\n            UUID | None: The resulting UUID object or None.\n        \"\"\"\n        if value.__class__.__name__ == \"UUID\" or value is None:\n            return cast(\"UUID | None\", value)\n        try:\n            value = UUID(hex=value)\n        except (TypeError, ValueError):\n            value = UUID(bytes=value)\n        return cast(\"UUID | None\", value)\n\n    def compare_values(self, x: Any, y: Any) -&gt; bool:\n        \"\"\"Compare two values for equality, with special handling for UUIDs.\n\n        If both values are UUID instances, compares their byte representations.\n        Otherwise, falls back to standard equality comparison.\n\n        Args:\n            x (Any): The first value to compare.\n            y (Any): The second value to compare.\n\n        Returns\n        -------\n            bool: True if the values are considered equal, False otherwise.\n        \"\"\"\n        if x.__class__.__name__ == \"UUID\" and y.__class__.__name__ == \"UUID\":\n            return cast(\"bool\", x.bytes == y.bytes)\n        return cast(\"bool\", x == y)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the Python type handled by this custom GUID type.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.__init__","title":"<code>__init__(*args, binary=True, **kwargs)</code>","text":"<p>Initialize the GUID type.</p> <p>Args:     *args: Positional arguments passed to the base TypeDecorator.     binary (bool): Whether to store the UUID as binary (default: True).     **kwargs: Additional keyword arguments passed to the base TypeDecorator.</p> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>def __init__(self, *args: Any, binary: bool = True, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize the GUID type.\n\n    Args:\n        *args: Positional arguments passed to the base TypeDecorator.\n        binary (bool): Whether to store the UUID as binary (default: True).\n        **kwargs: Additional keyword arguments passed to the base TypeDecorator.\n    \"\"\"\n    self.binary = binary\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.compare_values","title":"<code>compare_values(x, y)</code>","text":"<p>Compare two values for equality, with special handling for UUIDs.</p> <p>If both values are UUID instances, compares their byte representations. Otherwise, falls back to standard equality comparison.</p> <p>Args:     x (Any): The first value to compare.     y (Any): The second value to compare.</p> RETURNS DESCRIPTION <code>    bool: True if the values are considered equal, False otherwise.</code> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>def compare_values(self, x: Any, y: Any) -&gt; bool:\n    \"\"\"Compare two values for equality, with special handling for UUIDs.\n\n    If both values are UUID instances, compares their byte representations.\n    Otherwise, falls back to standard equality comparison.\n\n    Args:\n        x (Any): The first value to compare.\n        y (Any): The second value to compare.\n\n    Returns\n    -------\n        bool: True if the values are considered equal, False otherwise.\n    \"\"\"\n    if x.__class__.__name__ == \"UUID\" and y.__class__.__name__ == \"UUID\":\n        return cast(\"bool\", x.bytes == y.bytes)\n    return cast(\"bool\", x == y)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.load_dialect_impl","title":"<code>load_dialect_impl(dialect)</code>","text":"<p>Return the appropriate SQLAlchemy type for the given dialect.</p> <p>Args:     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    Any: The SQLAlchemy type descriptor for the GUID/UUID type.</code> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>def load_dialect_impl(self, dialect: Dialect) -&gt; Any:\n    \"\"\"Return the appropriate SQLAlchemy type for the given dialect.\n\n    Args:\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        Any: The SQLAlchemy type descriptor for the GUID/UUID type.\n    \"\"\"\n    if dialect.name in {\"postgresql\", \"duckdb\", \"cockroachdb\"}:\n        return dialect.type_descriptor(PG_UUID())\n    if dialect.name == \"oracle\":\n        return dialect.type_descriptor(ORA_RAW(16))\n    if dialect.name == \"mssql\":\n        return dialect.type_descriptor(MSSQL_UNIQUEIDENTIFIER())\n    if self.binary:\n        return dialect.type_descriptor(BINARY(16))\n    return dialect.type_descriptor(CHAR(32))\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.process_bind_param","title":"<code>process_bind_param(value, dialect)</code>","text":"<p>Process the value before sending it to the database.</p> <p>Converts the input value to the appropriate format (string, bytes, or hex) depending on the database dialect and the binary setting.</p> <p>Args:     value (bytes | str | UUID | None): The value to be processed.     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    bytes | str | None: The processed value suitable for the target database.</code> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>def process_bind_param(\n    self,\n    value: bytes | str | UUID | None,\n    dialect: Dialect,\n) -&gt; bytes | str | None:\n    \"\"\"Process the value before sending it to the database.\n\n    Converts the input value to the appropriate format (string, bytes, or hex)\n    depending on the database dialect and the binary setting.\n\n    Args:\n        value (bytes | str | UUID | None): The value to be processed.\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        bytes | str | None: The processed value suitable for the target database.\n    \"\"\"\n    if value is None:\n        return value\n    if dialect.name in {\"postgresql\", \"duckdb\", \"cockroachdb\", \"mssql\"}:\n        return str(value)\n    value = self.to_uuid(value)\n    if value is None:\n        return value\n    if dialect.name in {\"oracle\", \"spanner+spanner\"}:\n        return value.bytes\n    return value.bytes if self.binary else value.hex\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.process_result_value","title":"<code>process_result_value(value, dialect)</code>","text":"<p>Process the value returned from the database.</p> <p>Converts the database value to a UUID instance or None, depending on the input type and the database dialect.</p> <p>Args:     value (bytes | str | UUID | None): The value returned from the database.     dialect (Dialect): The SQLAlchemy dialect in use.</p> RETURNS DESCRIPTION <code>    UUID | None: The processed UUID value or None.</code> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>def process_result_value(\n    self,\n    value: bytes | str | UUID | None,\n    dialect: Dialect,\n) -&gt; UUID | None:\n    \"\"\"Process the value returned from the database.\n\n    Converts the database value to a UUID instance or None, depending on the\n    input type and the database dialect.\n\n    Args:\n        value (bytes | str | UUID | None): The value returned from the database.\n        dialect (Dialect): The SQLAlchemy dialect in use.\n\n    Returns\n    -------\n        UUID | None: The processed UUID value or None.\n    \"\"\"\n    if value is None:\n        return value\n    if value.__class__.__name__ == \"UUID\":\n        return cast(\"UUID\", value)\n    if dialect.name == \"spanner+spanner\":\n        return UUID(bytes=b64decode(cast(\"str | Buffer\", value)))\n    if self.binary:\n        return UUID(bytes=cast(\"bytes\", value))\n    return UUID(hex=cast(\"str\", value))\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/guid/#src.demo_bd.core.db.types.guid.GUID.to_uuid","title":"<code>to_uuid(value)</code>  <code>staticmethod</code>","text":"<p>Convert a value to a UUID instance or None.</p> <p>Attempts to convert the input value to a UUID object. If the value is already a UUID or None, it is returned as is. Otherwise, tries to create a UUID from a hex string, and if that fails, from bytes.</p> <p>Args:     value (Any): The value to convert.</p> RETURNS DESCRIPTION <code>    UUID | None: The resulting UUID object or None.</code> Source code in <code>src/demo_bd/core/db/types/guid.py</code> <pre><code>@staticmethod\ndef to_uuid(value: Any) -&gt; UUID | None:\n    \"\"\"Convert a value to a UUID instance or None.\n\n    Attempts to convert the input value to a UUID object. If the value is already a UUID\n    or None, it is returned as is. Otherwise, tries to create a UUID from a hex string,\n    and if that fails, from bytes.\n\n    Args:\n        value (Any): The value to convert.\n\n    Returns\n    -------\n        UUID | None: The resulting UUID object or None.\n    \"\"\"\n    if value.__class__.__name__ == \"UUID\" or value is None:\n        return cast(\"UUID | None\", value)\n    try:\n        value = UUID(hex=value)\n    except (TypeError, ValueError):\n        value = UUID(bytes=value)\n    return cast(\"UUID | None\", value)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/identity/","title":"Identity","text":"<p>Custom SQLAlchemy type for identity columns: uses BigInteger, with fallback to Integer for SQLite.</p> <p>This module defines a BigIntIdentity type for use in database models, ensuring compatibility across different database backends.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/","title":"Json","text":"<p>Custom JSON types for SQLAlchemy dialects.</p> <p>Provides Oracle Binary JSON and a cross-dialect JsonB type.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB","title":"<code>ORA_JSONB</code>","text":"<p>               Bases: <code>TypeDecorator</code>, <code>SchemaType</code></p> <p>Oracle Binary JSON type.</p> <p>JsonB = _JSON().with_variant(PG_JSONB, \"postgresql\").with_variant(ORA_JSONB, \"oracle\")</p> Source code in <code>src/demo_bd/core/db/types/json.py</code> <pre><code>class ORA_JSONB(TypeDecorator, SchemaType):  # type: ignore[misc] # noqa: N801\n    \"\"\"Oracle Binary JSON type.\n\n    JsonB = _JSON().with_variant(PG_JSONB, \"postgresql\").with_variant(ORA_JSONB, \"oracle\")\n\n    \"\"\"\n\n    impl = ORA_BLOB\n    cache_ok = True\n\n    @property\n    def python_type(self) -&gt; type[dict[str, Any]]:\n        \"\"\"Return the Python type handled by this custom JSON type.\"\"\"\n        return dict\n\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        self.name = kwargs.pop(\"name\", None)\n        self.oracle_strict = kwargs.pop(\"oracle_strict\", True)\n\n    def coerce_compared_value(self, op: Any, value: Any) -&gt; Any:\n        \"\"\"Return the type that should be used for the given value in a comparison operation.\"\"\"\n        return self.impl.coerce_compared_value(op=op, value=value)  # type: ignore[no-untyped-call, call-arg]\n\n    def load_dialect_impl(self, dialect: Dialect) -&gt; TypeEngine[Any]:\n        \"\"\"Return a TypeEngine instance for the given dialect.\"\"\"\n        return dialect.type_descriptor(ORA_BLOB())\n\n    def process_bind_param(self, value: Any, dialect: Dialect) -&gt; Any | None:\n        \"\"\"Process the value before sending it to the database.\"\"\"\n        return value if value is None else encode_json(value)\n\n    def process_result_value(self, value: bytes | None, dialect: Dialect) -&gt; Any | None:\n        \"\"\"Process the value after retrieving it from the database.\"\"\"\n        if dialect.oracledb_ver &lt; (2,):  # type: ignore[attr-defined]\n            return value if value is None else decode_json(value)\n        return value\n\n    def _should_create_constraint(self, compiler: Any, **kw: Any) -&gt; bool:\n        return cast(\"bool\", compiler.dialect.name == \"oracle\")\n\n    def _variant_mapping_for_set_table(self, column: Any) -&gt; dict[str, Any] | None:\n        if column.type._variant_mapping:\n            variant_mapping = dict(column.type._variant_mapping)\n            variant_mapping[\"_default\"] = column.type\n        else:\n            variant_mapping = None\n        return variant_mapping\n\n    @util.preload_module(\"sqlalchemy.sql.schema\")\n    def _set_table(self, column: Any, table: Any) -&gt; None:\n        schema = util.preloaded.sql_schema\n        variant_mapping = self._variant_mapping_for_set_table(column)\n        constraint_options = \"(strict)\" if self.oracle_strict else \"\"\n        sqltext = text(f\"{column.name} is json {constraint_options}\")\n        e = schema.CheckConstraint(\n            sqltext,\n            name=f\"{column.name}_is_json\",\n            _create_rule=util.portable_instancemethod(  # type: ignore[no-untyped-call]\n                self._should_create_constraint,\n                {\"variant_mapping\": variant_mapping},\n            ),\n            _type_bound=True,\n        )\n        table.append_constraint(e)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the Python type handled by this custom JSON type.</p>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB.coerce_compared_value","title":"<code>coerce_compared_value(op, value)</code>","text":"<p>Return the type that should be used for the given value in a comparison operation.</p> Source code in <code>src/demo_bd/core/db/types/json.py</code> <pre><code>def coerce_compared_value(self, op: Any, value: Any) -&gt; Any:\n    \"\"\"Return the type that should be used for the given value in a comparison operation.\"\"\"\n    return self.impl.coerce_compared_value(op=op, value=value)  # type: ignore[no-untyped-call, call-arg]\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB.load_dialect_impl","title":"<code>load_dialect_impl(dialect)</code>","text":"<p>Return a TypeEngine instance for the given dialect.</p> Source code in <code>src/demo_bd/core/db/types/json.py</code> <pre><code>def load_dialect_impl(self, dialect: Dialect) -&gt; TypeEngine[Any]:\n    \"\"\"Return a TypeEngine instance for the given dialect.\"\"\"\n    return dialect.type_descriptor(ORA_BLOB())\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB.process_bind_param","title":"<code>process_bind_param(value, dialect)</code>","text":"<p>Process the value before sending it to the database.</p> Source code in <code>src/demo_bd/core/db/types/json.py</code> <pre><code>def process_bind_param(self, value: Any, dialect: Dialect) -&gt; Any | None:\n    \"\"\"Process the value before sending it to the database.\"\"\"\n    return value if value is None else encode_json(value)\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/core/db/types/json/#src.demo_bd.core.db.types.json.ORA_JSONB.process_result_value","title":"<code>process_result_value(value, dialect)</code>","text":"<p>Process the value after retrieving it from the database.</p> Source code in <code>src/demo_bd/core/db/types/json.py</code> <pre><code>def process_result_value(self, value: bytes | None, dialect: Dialect) -&gt; Any | None:\n    \"\"\"Process the value after retrieving it from the database.\"\"\"\n    if dialect.oracledb_ver &lt; (2,):  # type: ignore[attr-defined]\n        return value if value is None else decode_json(value)\n    return value\n</code></pre>"},{"location":"MODULES-Reference/demo_bd/models/","title":"Index","text":"<p>Demo BD database models.</p>"},{"location":"MODULES-Reference/snap_core/","title":"Index","text":"<p>Snap Core.</p>"},{"location":"MODULES-Reference/snap_core/config/","title":"Index","text":"<p>Snap Core Config.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/","title":"Manager","text":"<p>SnapEnv Base Settings.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings","title":"<code>SnapEnvCommonSettings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>SnapEnv common configuration parameters shared between all environments.</p> <p>This class reads configuration parameters defined within the class, from environment variables, and from the .env file. The source priority is as follows (from highest to lowest):</p> <ul> <li>env_settings</li> <li>dotenv_settings</li> <li>init_settings</li> <li>file_secret_settings</li> </ul> Environment Variables <p>The following environment variables should be defined:</p> <ul> <li>HOSTNAME (on Linux servers only, set by OS)</li> <li>COMPUTERNAME (on Windows servers only, set by OS)</li> <li>ENVIRONMENT (on all servers)</li> </ul> File Paths <p>Paths where the .env file should be placed: <ul> <li>Linux: /home/&lt;user&gt;/.local</li> <li>macOS: /home/&lt;user&gt;/.local</li> <li>Windows: C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Python</li> <li>Python/Poetry/Docker: Root dir of the project</li> </ul> <p>Paths where secret files should be placed:</p> <ul> <li>Linux: /home/&lt;user&gt;/.local/secrets</li> <li>macOS: /home/&lt;user&gt;/.local/secrets</li> <li>Windows: C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Python\\secrets</li> <li>Docker: /run/secrets</li> </ul> ATTRIBUTE DESCRIPTION <code>env</code> <p>The current environment.</p> <p> TYPE: <code>str</code> </p> <code>platform</code> <p>The platform on which the code is running.</p> <p> TYPE: <code>str</code> </p> <code>server</code> <p>Local server name stripped of possible domain part.</p> <p> TYPE: <code>str</code> </p> <code>model_config</code> <p>Configuration dictionary for settings including secrets and .env file handling.</p> <p> TYPE: <code>SettingsConfigDict</code> </p> METHOD DESCRIPTION <code>server</code> <p>Returns the local server name in upper case.</p> <code>settings_customise_sources</code> <p>Customizes the source priority order.</p> Source code in <code>src/snap_core/config/manager.py</code> <pre><code>class SnapEnvCommonSettings(BaseSettings):\n    r\"\"\"\n    SnapEnv common configuration parameters shared between all environments.\n\n    This class reads configuration parameters defined within the class,\n    from environment variables, and from the .env file. The source priority\n    is as follows (from highest to lowest):\n\n    - env_settings\n    - dotenv_settings\n    - init_settings\n    - file_secret_settings\n\n    Environment Variables\n    ---------------------\n    The following environment variables should be defined:\n\n    - HOSTNAME (on Linux servers only, set by OS)\n    - COMPUTERNAME (on Windows servers only, set by OS)\n    - ENVIRONMENT (on all servers)\n\n    File Paths\n    ----------\n    Paths where the &lt;environment&gt;.env file should be placed:\n\n    - Linux: /home/&lt;user\\&gt;/.local\n    - macOS: /home/&lt;user\\&gt;/.local\n    - Windows: C:\\\\Users\\\\&lt;user\\&gt;\\\\AppData\\\\Roaming\\\\Python\n    - Python/Poetry/Docker: Root dir of the project\n\n    Paths where secret files should be placed:\n\n    - Linux: /home/&lt;user\\&gt;/.local/secrets\n    - macOS: /home/&lt;user\\&gt;/.local/secrets\n    - Windows: C:\\\\Users\\\\&lt;user\\&gt;\\\\AppData\\\\Roaming\\\\Python\\\\secrets\n    - Docker: /run/secrets\n\n    Attributes\n    ----------\n    env : str\n        The current environment.\n    platform : str\n        The platform on which the code is running.\n    server : str\n        Local server name stripped of possible domain part.\n    model_config : SettingsConfigDict\n        Configuration dictionary for settings including secrets and .env file handling.\n\n    Methods\n    -------\n    server():\n        Returns the local server name in upper case.\n    settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings):\n        Customizes the source priority order.\n    \"\"\"\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        secrets_dir=SECRETS_DIR,\n        env_file_encoding=\"utf-8\",\n        env_file=\".env\",\n    )\n\n    # constant parameters.\n\n    # Environment depending parameters.\n    env: str = ENVIRONMENT\n    platform: str = PLATFORM.get(sys.platform, \"other\")\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def server(self) -&gt; str:\n        \"\"\"\n        Return local server name stripped of possible domain part.\n\n        Returns\n        -------\n        str\n            Server name in upper case.\n        \"\"\"\n        return platform.node()\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        \"\"\"\n        Change source priority order (env trumps environment).\n\n        Parameters\n        ----------\n        settings_cls : type[BaseSettings]\n            The settings class.\n        init_settings : PydanticBaseSettingsSource\n            Initial settings source.\n        env_settings : PydanticBaseSettingsSource\n            Environment variable settings source.\n        dotenv_settings : PydanticBaseSettingsSource\n            Dotenv file settings source.\n        file_secret_settings : PydanticBaseSettingsSource\n            Secret file settings source.\n\n        Returns\n        -------\n        tuple[PydanticBaseSettingsSource, ...]\n            Tuple of settings sources in the new priority order.\n        \"\"\"\n        return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings.server","title":"<code>server</code>  <code>property</code>","text":"<p>Return local server name stripped of possible domain part.</p> RETURNS DESCRIPTION <code>str</code> <p>Server name in upper case.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings.settings_customise_sources","title":"<code>settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings)</code>  <code>classmethod</code>","text":"<p>Change source priority order (env trumps environment).</p> PARAMETER DESCRIPTION <code>settings_cls</code> <p>The settings class.</p> <p> TYPE: <code>type[BaseSettings]</code> </p> <code>init_settings</code> <p>Initial settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>env_settings</code> <p>Environment variable settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>dotenv_settings</code> <p>Dotenv file settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>file_secret_settings</code> <p>Secret file settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> RETURNS DESCRIPTION <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>Tuple of settings sources in the new priority order.</p> Source code in <code>src/snap_core/config/manager.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Change source priority order (env trumps environment).\n\n    Parameters\n    ----------\n    settings_cls : type[BaseSettings]\n        The settings class.\n    init_settings : PydanticBaseSettingsSource\n        Initial settings source.\n    env_settings : PydanticBaseSettingsSource\n        Environment variable settings source.\n    dotenv_settings : PydanticBaseSettingsSource\n        Dotenv file settings source.\n    file_secret_settings : PydanticBaseSettingsSource\n        Secret file settings source.\n\n    Returns\n    -------\n    tuple[PydanticBaseSettingsSource, ...]\n        Tuple of settings sources in the new priority order.\n    \"\"\"\n    return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"adr/0001-record-architecture-decisions/","title":"Use Markdown Any Decision Records V3","text":""},{"location":"adr/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record any decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>"},{"location":"adr/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 3.0.0 \u2013 The Markdown Any Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Other templates listed at https://schubmat.github.io/DecisionCapture</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 3.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>"},{"location":"adr/adr-template/","title":"Adr template","text":""},{"location":"adr/adr-template/#source-httpsgithubcomadrmadrblob300templateadr-templatemd","title":"source: https://github.com/adr/madr/blob/3.0.0/template/adr-template.md","text":""},{"location":"adr/adr-template/#these-are-optional-elements-feel-free-to-remove-any-of-them","title":"These are optional elements. Feel free to remove any of them.","text":"<p>status: {proposed | rejected | accepted | deprecated | \u2026 | superseded by [ADR-0001]0001-record-architecture-decisions.md)} date: {YYYY-MM-DD when the decision was last updated} deciders: {list everyone involved in the decision} consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication} informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}</p>"},{"location":"adr/adr-template/#short-title-of-solved-problem-and-solution","title":"{short title of solved problem and solution}","text":""},{"location":"adr/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adr/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adr/adr-template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"adr/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adr/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"adr/summary/","title":"ADR Summary","text":"ID Date Decision Status 1 03-02-2024 Use Markdown Any Decision Records V3 Accepted"},{"location":"apis/rest/","title":"Rest","text":""},{"location":"apis/rest/#snapenv-backend-template-api-010","title":"SnapEnv Backend Template API 0.1.0","text":""},{"location":"apis/rest/#endpoints","title":"Endpoints","text":""},{"location":"apis/rest/#get-compute","title":"GET /compute","text":"<p>Compute</p> Description <p>Compute the result of a CPU-bound function.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>n</code> query integer 42 No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"integer\",\n    \"title\": \"Response Compute Compute Get\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"apis/rest/#returns","title":"Returns","text":"<pre><code>int: fibonacci result\n</code></pre>"},{"location":"apis/rest/#schemas","title":"Schemas","text":""},{"location":"apis/rest/#httpvalidationerror","title":"HTTPValidationError","text":"Name Type <code>detail</code> Array&lt;ValidationError&gt;"},{"location":"apis/rest/#validationerror","title":"ValidationError","text":"Name Type <code>loc</code> Array&lt;&gt; <code>msg</code> string <code>type</code> string"}]}